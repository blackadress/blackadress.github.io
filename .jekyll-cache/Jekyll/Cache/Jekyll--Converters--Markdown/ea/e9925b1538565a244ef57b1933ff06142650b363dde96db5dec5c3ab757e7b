I"I5<p>Una aplicación de mensajería instántanea es relativamente fácil de programar, con el uso adecuado de
herramientas podemos tener nuestro propio sistema de mensajería en menos de 20 minutos.
El pequeño programa que te voy a mostrar aquí tiene sus problemas pero es un buen proyecto
didáctico para familiarizarte mejor con el uso de Web Sockets.</p>

<p>Si quieres tener una mirada a un proyecto más sencillo con Web Sockets, te recomiendo este <a href="/echo-server-nodejs">artículo</a>.</p>

<p>El proyecto consiste de 2 clientes que pueden intercambiar mensajes mediante un servidor.
Si el cliente 1 manda un ‘Hola’ el servidor debe mandar ese mensaje al cliente 2 y viceversa.</p>

<h2 id="el-servidor">El servidor</h2>

<p>Primero importemos los módulos que vamos a necesitar y definamos las cosas básicas,
estaremos usando el siempre ‘express’ para nuestro servidor, el módulo de node ‘http’ para integrarlo con ws,
el módulo ‘url’ para parsear la url que va a contener el ‘id’ del usuario y 
‘ws’ como librería de WebSocket.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">http</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">url</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">WebSocket</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">ws</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">let</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">wss</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">.</span><span class="nx">Server</span><span class="p">({</span> <span class="na">server</span><span class="p">:</span> <span class="nx">server</span><span class="p">,</span> <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/echo</span><span class="dl">"</span> <span class="p">});</span>
</code></pre></div></div>

<p>Como tenemos que mandar mensajes de un usuario a otro, tenemos que saber el socket de cada usuario,
para lograr este cometido simplemente usaremos id’s de usuarios para identificar cada socket
y los guardaremos en un objeto de javascript para acceder fácilmente a ellos.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">userSockets</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">wss</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">connection</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">connection</span><span class="p">(</span><span class="nx">ws</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
  <span class="nx">userSockets</span><span class="p">[</span><span class="nx">userId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ws</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Conexion establecida para usuario</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userId</span><span class="p">);</span>

  <span class="nx">ws</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">incoming</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">destinatarioId</span><span class="p">,</span> <span class="nx">mensaje</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">destinatario: %s, received: %s</span><span class="dl">"</span><span class="p">,</span> <span class="nx">destinatarioId</span><span class="p">,</span> <span class="nx">mensaje</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">socketDestinatario</span> <span class="o">=</span> <span class="nx">userSockets</span><span class="p">[</span><span class="nx">destinatarioId</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">socketDestinatario</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">socketDestinatario</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">ws</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">el usuario no esta conectado</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="nx">ws</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Conexión con el servidor de eco exitosa</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>Primero definimos la variable ‘userSockets’ para almacenar los usuarios y sus respectivos sockets.</li>
  <li>Definimos lo que va a pasar en el evento ‘connection’ con una función de 2 parámetros.</li>
  <li>Parseamos la url para obtener el ‘user_id’, guardamos el socket y mandamos un mensaje de confirmación.</li>
  <li>En la definición de lo que va a pasar en el evento ‘message’ obtenemos el destinatario y el mensaje.</li>
  <li>Obtenemos el socket del destinatario y en caso de no haberse conectado al servidor todavía,
mandamos un mensaje de error al emisor.</li>
</ul>

<p>Finalmente hacemos que nuestra aplicación empieze a escuchar.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Aplicacion corriendo en puerto:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">PORT</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<hr />

<h2 id="el-cliente">El cliente</h2>

<p>Para hacerlo sencillo utilizaremos 2 páginas html y les pondremos javascript para
mandar un mensaje, como prueba de concepto, luego podrás generalizar el uso agregando
botones, cuadros de texto, etc.
Para este proyecto únicamente veremos la generalización, es decir solo veremos los mensajes en consola.</p>

<p>Primero creamos 2 documentos html: index.html e index2.html, dentro utilizaremos el tag ‘script’
para hacer la conexión con javascript</p>

<p>‘index.html’</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">echoSocketUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">ws://localhost:3000/echo?user_id=1</span><span class="dl">'</span>
  <span class="kd">const</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="nx">echoSocketUrl</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">mensaje</span> <span class="o">=</span> <span class="p">{</span> <span class="na">destinatarioId</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">mensaje</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hola</span><span class="dl">"</span><span class="p">}</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">mensaje</span><span class="p">));</span> 
  <span class="p">}</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Message from server:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>Nótese que definiendo la url agregamos el parámetro ‘user_id=1’ y en el mensaje pasamos el id del destinatario.</p>

<p>‘index2.html’</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">echoSocketUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">ws://localhost:3000/echo?user_id=2</span><span class="dl">'</span>
  <span class="kd">const</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="nx">echoSocketUrl</span><span class="p">);</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">mensaje</span> <span class="o">=</span> <span class="p">{</span> <span class="na">destinatarioId</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">mensaje</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hola</span><span class="dl">"</span><span class="p">}</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">mensaje</span><span class="p">));</span> 
  <span class="p">}</span>

  <span class="nx">socket</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Message from server:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
:ET